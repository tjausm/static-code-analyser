{
import qualified Data.Map as M
import qualified Data.Maybe as Maybe
import qualified Data.List as L
}

data Program
  | Program   procs :: Procs
              stat  :: Stat
  deriving Program : Show

data Program'
  | Program'  procs :: Procs'
              stat :: Stat'
  deriving Program' : Show

data Proc
  | Proc          name :: String  inp :: {[String]}  out :: String   stat :: Stat
deriving Proc : Show

data Proc'
  | Proc'         labelEntry :: Int  labelReturn :: Int    name :: String  inp :: {[String]}  out :: String   stat :: Stat'
deriving Proc' : Show

data Stat
  | Skip
  | IfThenElse    cond  :: {BExpr}      stat1  :: Stat      stat2 :: Stat
  | While         cond  :: {BExpr}      stat   :: Stat
  | Call          name  :: String     params :: {Exprs}    out :: String
  | IAssign       name  :: String     val    :: {IExpr}
  | BAssign       name  :: String     val    :: {BExpr}
  | Seq           stat1 :: Stat       stat2  :: Stat
  | Malloc        name  :: String     size   :: {IExpr}
  | Free          ptr   :: {IExpr}
  | RefAssign     ptr   :: {IExpr}    val    :: {IExpr}
  | Continue
  | Break
deriving Stat : Show

data Stat'
  | Skip'          label :: Int
  | IfThenElse'    labelc :: Int       cond  :: BExpr      stat1  :: Stat'     stat2 :: Stat'
  | While'         labelc :: Int       cond  :: BExpr      stat   :: Stat'
  | Call'          labelCall :: Int  labelExit :: Int      name  :: String     params :: Exprs    out :: String
  | IAssign'       label :: Int        name  :: String     val    :: IExpr
  | BAssign'       label :: Int        name  :: String     val    :: BExpr
  | Seq'           stat1 :: Stat'      stat2  :: Stat'
  | Malloc'        label :: Int        name  :: String     size   :: IExpr
  | Free'          label :: Int        ptr   :: IExpr
  | RefAssign'     label :: Int        ptr   :: IExpr      val :: IExpr
  | Continue'      label :: Int
  | Break'         label :: Int
deriving Stat' : Show

data IExpr 
  | IConst        val  :: Int
  | Var           name :: String
  | Plus          left :: IExpr       right :: IExpr
  | Minus         left :: IExpr       right :: IExpr
  | Times         left :: IExpr       right :: IExpr
  | Divide        left :: IExpr       right :: IExpr
  | Deref         ptr  :: IExpr
deriving IExpr : Eq, Show

data BExpr
  | BConst        val  :: Bool
  | BVar          name :: String
  | LessThan      left :: IExpr       right :: IExpr
  | GreaterThan   left :: IExpr       right :: IExpr
  | LessEqual     left :: IExpr       right :: IExpr
  | GreaterEqual  left :: IExpr       right :: IExpr
  | IEqual        left :: IExpr       right :: IExpr
  | BEqual        left :: BExpr       right :: BExpr
  | And           left :: BExpr       right :: BExpr
  | Or            left :: BExpr       right :: BExpr
  | Not           val  :: BExpr
deriving BExpr : Eq, Show


data Expr | B expr :: BExpr
          | I expr :: IExpr
deriving Expr : Eq, Show

data Code | CBExpr   BExpr
          | CIExpr   IExpr
          | CStat    Stat'
          | CProc    Proc'
          | CProgram Program'

type Procs = [Proc]
type Procs' = [Proc']
type Exprs = [Expr]

data Flow | Intra labels :: {(Int, Int)}
          | Inter labels :: {(Int, Int)}

-- * Compute flow, init, final, blocks.

-- Init

attr Program' Proc' Stat' [ | | init :: Int ]

sem Program'
  | Program'
    lhs.init = @stat.init

sem Proc'
  | Proc'
    lhs.init = @labelEntry

sem Stat' 
  | Skip' 
    lhs.init = @label         

  | IfThenElse' 
    lhs.init = @labelc    

  | While' 
    lhs.init = @labelc        
  
  | Call'
    lhs.init = @labelCall          
  
  | IAssign'
    lhs.init = @label

  | BAssign'
    lhs.init = @label

  | Seq'
    lhs.init = @stat1.init

  | Malloc'
    lhs.init = @label

  | Free'
    lhs.init = @label

  | RefAssign' 
    lhs.init = @label

  | Continue'    
    lhs.init = @label  

  | Break'
    lhs.init = @label

-- Final
attr Program' Proc' Stat' [ | | final :: {[Int]} ] 

sem Program'
  | Program'
    lhs.final = @stat.final

sem Proc'
  | Proc'
    lhs.final = [@labelReturn]

sem Stat' 
  | Skip' 
    lhs.final = [@label]         

  | IfThenElse' 
    lhs.final = @stat1.final ++ @stat2.final 

  | While' 
    lhs.final = [@labelc]        
  
  | Call'
    lhs.final = [@labelCall]          
  
  | IAssign'
    lhs.final = [@label]

  | BAssign'
    lhs.final = [@label]

  | Seq'
    lhs.final = @stat2.final

  | Malloc'
    lhs.final = [@label]

  | Free'
    lhs.final = [@label]

  | RefAssign' 
    lhs.final = [@label]

  | Continue'    
    lhs.final = [@label]  

  | Break'
    lhs.final = [@label]

-- Flow
attr Program' Procs' Proc' Stat' [ | | flow :: {[Flow]} ]

sem Program'
  | Program'
    lhs.flow = @stat.flow ++ @procs.flow

sem Proc'
  | Proc'
    lhs.flow = @stat.flow

sem Procs'
  | Nil
    lhs.flow = []
  | Cons
    lhs.flow = @hd.flow ++ @tl.flow      

sem Stat' 
  | Skip' 
    lhs.flow = []         

  | IfThenElse' 
    lhs.flow = Intra (@labelc, @stat1.init) : Intra (@labelc, @stat2.init) : @stat1.flow ++ @stat2.flow

  | While' 
    lhs.flow = Intra (@labelc, @stat.init) : map (\x -> Intra (x, @labelc)) @stat.final ++ @stat.flow        
  
  | Call'
    lhs.flow = (\(x, y) -> Inter (@labelCall, x) : [Inter (y, @labelExit)]) (@lhs.procMapPassDown M.! @name)
    -- Using (!) returns an error if the key is not in the map, but that should not happen.        
  
  | IAssign'
    lhs.flow = []

  | BAssign'
    lhs.flow = []

  | Seq'
    lhs.flow = @stat1.flow ++ @stat2.flow ++ map (\x -> Intra (x, @stat2.init)) @stat1.final

  | Malloc'
    lhs.flow = []

  | Free'
    lhs.flow = []

  | RefAssign' 
    lhs.flow = []

  | Continue'    
    lhs.flow = []  

  | Break'
    lhs.flow = []

-- inter-flow

attr Program' Procs' Proc' Stat' [ | | interflow :: {[(Int, Int, Int, Int)]} ]

sem Program'
  | Program'
    lhs.interflow = @stat.interflow ++ @procs.interflow

sem Proc'
  | Proc'
    lhs.interflow = @stat.interflow

sem Procs'
  | Nil
    lhs.interflow = []
  | Cons
    lhs.interflow = @hd.interflow ++ @tl.interflow      

sem Stat' 
  | Skip' 
    lhs.interflow = []         

  | IfThenElse' 
    lhs.interflow = @stat1.interflow ++ @stat2.interflow

  | While' 
    lhs.interflow = @stat.interflow        
  
  | Call'
    lhs.interflow = (\(x, y) -> [(@labelCall, x, y, @labelExit)]) (@lhs.procMapPassDown M.! @name)
    -- Using (!) returns an error if the key is not in the map, but that should not happen.        
  
  | IAssign'
    lhs.interflow = []

  | BAssign'
    lhs.interflow = []

  | Seq'
    lhs.interflow = @stat1.interflow ++ @stat2.interflow

  | Malloc'
    lhs.interflow = []

  | Free'
    lhs.interflow = []

  | RefAssign' 
    lhs.interflow = []

  | Continue'    
    lhs.interflow = []  

  | Break'
    lhs.interflow = []

-- map procedureName to entry and exit label. 

attr Program' Procs' Proc' [ | | procMapCollect :: { M.Map String (Int, Int) } ]
attr Procs' Proc' Stat' [ procMapPassDown :: { M.Map String (Int, Int) } | | ]

sem Program'
  | Program'
    lhs.procMapCollect = @procs.procMapCollect
    stat.procMapPassDown = @procs.procMapCollect
    procs.procMapPassDown = @procs.procMapCollect

sem Proc'
  | Proc'
    lhs.procMapCollect = M.singleton @name (@labelEntry, @labelReturn)
    stat.procMapPassDown = @lhs.procMapPassDown

sem Procs'
  | Nil
    lhs.procMapCollect = M.empty
  | Cons
    lhs.procMapCollect = M.union @hd.procMapCollect @tl.procMapCollect
    hd.procMapPassDown = @lhs.procMapPassDown
    tl.procMapPassDown = @lhs.procMapPassDown     

sem Stat' 
  | IfThenElse' 
    stat1.procMapPassDown = @lhs.procMapPassDown
    stat2.procMapPassDown = @lhs.procMapPassDown

  | While' 
    stat.procMapPassDown = @lhs.procMapPassDown 

  | Seq'
    stat1.procMapPassDown = @lhs.procMapPassDown
    stat2.procMapPassDown = @lhs.procMapPassDown

-- * Create a labelled AST

attr Proc Procs Stat [ | label :: Int | ]

attr Program [ | | labelled :: Program' ]
attr Proc    [ | | labelled :: Proc'    ]
attr Procs   [ | | labelled :: Procs'   ]
attr Stat    [ | | labelled :: Stat'    ]

sem Program
  | Program
    procs.label  = 1
    stat.label   = @procs.label
    lhs.labelled = Program' @procs.labelled @stat.labelled

sem Procs
  | Nil
    lhs.labelled = []
  | Cons
    lhs.labelled = @hd.labelled : @tl.labelled

sem Proc
  | Proc
    stat.label   = @lhs.label + 1
    lhs.labelled = Proc' @lhs.label @stat.label @name @inp @out @stat.labelled
    lhs.label    = @stat.label + 1

sem Stat
  | Skip
    lhs.label    = @lhs.label + 1
    lhs.labelled = Skip' @lhs.label

  | IfThenElse
    stat1.label  = @lhs.label + 1 -- lhs.label is the label of the conditional.
    stat2.label  = @stat1.label
    lhs.label    = @stat2.label
    lhs.labelled = IfThenElse' @lhs.label @cond @stat1.labelled @stat2.labelled

  | While
    stat.label   = @lhs.label + 1 -- lhs.label is the label of the conditional.
    lhs.label    = @stat.label
    lhs.labelled = While' @lhs.label @cond @stat.labelled

  | Call
    lhs.label    = @lhs.label + 2 -- Entry and exit label
    lhs.labelled = Call' @lhs.label (@lhs.label + 1) @name @params @out

  | IAssign
    lhs.label    = @lhs.label + 1
    lhs.labelled = IAssign' @lhs.label @name @val

  | BAssign
    lhs.label    = @lhs.label + 1
    lhs.labelled = BAssign' @lhs.label @name @val

  | Seq
    stat1.label  = @lhs.label
    stat2.label  = @stat1.label
    lhs.labelled = Seq' @stat1.labelled @stat2.labelled

  | Malloc
    lhs.label    = @lhs.label + 1
    lhs.labelled = Malloc' @lhs.label @name @size

  | Free
    lhs.label    = @lhs.label + 1
    lhs.labelled = Free' @lhs.label @ptr

  | RefAssign
    lhs.label    = @lhs.label + 1
    lhs.labelled = RefAssign' @lhs.label @ptr @val

  | Continue
    lhs.label    = @lhs.label + 1
    lhs.labelled = Continue' @lhs.label

  | Break
    lhs.label    = @lhs.label + 1
    lhs.labelled = Break' @lhs.label

-- * Pretty printer
attr Program'           [ | | pretty :: String ]
attr Proc' Procs' Stat' [ | | pretty :: { [String] } ]
attr IExpr BExpr        [ | | pretty :: String  precedence :: Int ]
attr Expr Exprs         [ | | pretty :: String ]
attr Stat'              [ | | isSkip :: Bool  isSingle :: Bool]

{
indent :: [String] -> [String]
indent = map ("  " ++)

showLabel :: Int -> String
showLabel label = "\ESC[93m" ++ reverse (go label) ++ "\ESC[0m"
  where
    go :: Int -> String
    go x
      | x < 0     = error "Negative label"
      | r == 0    = subscript !! m : ""
      | otherwise = subscript !! m : go r
      where
        (r, m) = x `divMod` 10
    subscript = "₀₁₂₃₄₅₆₇₈₉"

addSemicolon :: [String] -> [String]
addSemicolon [] = []
addSemicolon xs = init xs ++ [last xs ++ ";"]
}

sem Program'
  | Program'
    lhs.pretty = unlines ("begin" : indent @procs.pretty ++ indent @stat.pretty ++ ["end"])

sem Procs'
  | Nil
    lhs.pretty = []
  | Cons
    lhs.pretty = @hd.pretty ++ @tl.pretty

sem Proc'
  | Proc'
    lhs.pretty = ["proc " ++ @name ++ "(val " ++ (@inp >>= (++ ", ")) ++ "out " ++ @out ++ ") is" ++ showLabel @labelEntry]
                  ++ indent @stat.pretty
                  ++ ["end" ++ showLabel @labelReturn ++ ";"]

sem Stat'
  | Skip'
    lhs.pretty   = ["skip" ++ showLabel @label]
    lhs.isSkip   = True
    lhs.isSingle = True
  | IfThenElse'
    lhs.pretty   = ["if [" ++ @cond.pretty ++ "]" ++ showLabel @labelc ++ " then" ++ (if @stat1.isSingle then "" else " {")]
                    ++ indent @stat1.pretty
                    ++ (if @stat2.isSkip then (if @stat1.isSingle then [] else ["}"]) else
                            [(if @stat1.isSingle then "" else "} ") ++ "else" ++ (if @stat2.isSingle then "" else " {")]
                        ++ indent @stat2.pretty
                        ++ (if @stat2.isSingle then [] else ["}"])
                      )
    lhs.isSkip   = False
    lhs.isSingle = False
  | While'
    lhs.pretty   = ["while [" ++ @cond.pretty ++ "]" ++ showLabel @labelc ++ " do" ++ (if @stat.isSingle then "" else " {")]
                    ++ indent @stat.pretty
                    ++ (if @stat.isSingle then [] else ["}"])
    lhs.isSkip   = False
    lhs.isSingle = False
  | Call'
    lhs.pretty   = ["[call " ++ @name ++ "(" ++ @params.pretty ++ @out ++ ")]" ++ showLabel @labelCall ++ "₋" ++ showLabel @labelExit]
    lhs.isSkip   = False
    lhs.isSingle = True
  | IAssign'
    lhs.pretty   = ["[" ++ @name ++ " := " ++ @val.pretty ++ "]" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True
  | BAssign'
    lhs.pretty   = ["[" ++ @name ++ " := " ++ @val.pretty ++ "]" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True
  | Seq'
    lhs.pretty   = addSemicolon @stat1.pretty ++ @stat2.pretty
    lhs.isSkip   = False
    lhs.isSingle = False
  | Malloc'
    lhs.pretty   = ["malloc(" ++ @name ++ ", " ++ @size.pretty ++ ")" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True
  | Free'
    lhs.pretty   = ["free(" ++ @ptr.pretty ++ ")" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True
  | RefAssign'
    lhs.pretty   = ["[*" ++ @ptr.pretty ++ " := " ++ @val.pretty ++ "]" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True
  | Continue'
    lhs.pretty   = ["continue" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True
  | Break'
    lhs.pretty   = ["continue" ++ showLabel @label]
    lhs.isSkip   = False
    lhs.isSingle = True

{
parensIf :: Bool -> String -> String
parensIf False str = str
parensIf True str = "(" ++ str ++ ")"
}

sem IExpr
  | IConst
    lhs.pretty = show @val
    lhs.precedence = 10
  | Var
    lhs.pretty = @name
    lhs.precedence = 10
  | Plus
    lhs.pretty = parensIf (@left.precedence < 6) @left.pretty ++ " + " ++ parensIf (@right.precedence <= 6) @right.pretty
    lhs.precedence = 6
  | Minus
    lhs.pretty = parensIf (@left.precedence < 6) @left.pretty ++ " - " ++ parensIf (@right.precedence <= 6) @right.pretty
    lhs.precedence = 6
  | Times
    lhs.pretty = parensIf (@left.precedence < 7) @left.pretty ++ " * " ++ parensIf (@right.precedence <= 7) @right.pretty
    lhs.precedence = 7
  | Divide
    lhs.pretty = parensIf (@left.precedence < 7) @left.pretty ++ " / " ++ parensIf (@right.precedence <= 7) @right.pretty
    lhs.precedence = 7
  | Deref
    lhs.pretty = "*" ++ parensIf (@ptr.precedence < 10) @ptr.pretty
    lhs.precedence = 10

sem BExpr
  | BConst
    lhs.pretty = show @val
    lhs.precedence = 10
  | BVar
    lhs.pretty = @name
    lhs.precedence = 10
  | LessThan
    lhs.pretty = parensIf (@left.precedence <= 4) @left.pretty ++ " < " ++ parensIf (@right.precedence <= 4) @right.pretty
    lhs.precedence = 4
  | GreaterThan
    lhs.pretty = parensIf (@left.precedence <= 4) @left.pretty ++ " > " ++ parensIf (@right.precedence <= 4) @right.pretty
    lhs.precedence = 4
  | LessEqual
    lhs.pretty = parensIf (@left.precedence <= 4) @left.pretty ++ " <= " ++ parensIf (@right.precedence <= 4) @right.pretty
    lhs.precedence = 4
  | GreaterEqual
    lhs.pretty = parensIf (@left.precedence <= 4) @left.pretty ++ " >= " ++ parensIf (@right.precedence <= 4) @right.pretty
    lhs.precedence = 4
  | IEqual
    lhs.pretty = parensIf (@left.precedence <= 4) @left.pretty ++ " == " ++ parensIf (@right.precedence <= 4) @right.pretty
    lhs.precedence = 4
  | BEqual
    lhs.pretty = parensIf (@left.precedence <= 4) @left.pretty ++ " == " ++ parensIf (@right.precedence <= 4) @right.pretty
    lhs.precedence = 4
  | And
    lhs.pretty = parensIf (@left.precedence < 3) @left.pretty ++ " && " ++ parensIf (@right.precedence < 3) @right.pretty
    lhs.precedence = 3
  | Or
    lhs.pretty = parensIf (@left.precedence < 2) @left.pretty ++ " || " ++ parensIf (@right.precedence < 2) @right.pretty
    lhs.precedence = 2
  | Not
    lhs.pretty = "not " ++ parensIf (@val.precedence < 10) @val.pretty
    lhs.precedence = 10

sem Expr
  | B
    lhs.pretty = @expr.pretty
  | I
    lhs.pretty = @expr.pretty

sem Exprs
  | Nil
    lhs.pretty = ""
  | Cons
    lhs.pretty = @hd.pretty ++ ", " ++ @tl.pretty
